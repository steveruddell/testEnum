<#@ template debug="false" hostspecific="false" language="VB" compilerOptions="/optioninfer" #>

<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data"#>
<#@ assembly name="System.Data.DataSetExtensions" #>
<#@ output extension=".vb" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SQLClient" #>
<#
	Dim _SQlConn as New sqlconnection( "Data Source=SCM-SQLDEV\DEV;Initial Catalog=SCM6;User ID=scm6_user;Password=pL@tf0RM!")
	Dim _SqlAdapt as New SqlDataAdapter("Proc_EnumDepositTypes",  _sqlconn)
	Dim _DataSet as New Dataset
	
	_SqlConn.Open
	_SqlAdapt.Fill(_DataSet)
	_SqlConn.Close
#>

'=================================================================
'EnumDepositTypes.vb is automatically generated by the EnumDepositTypes.tt T4 file.
'Do not make any changes in the vb file.
'
'Enumeration members are gotten from a call to Proc_EnumDepositTypes in the database.
'=================================================================

Namespace SCM6Enums.StructuredEnums

Public Class DepositType
    Public ReadOnly Property Id As Integer
    Public ReadOnly Property Name As String
    Public ReadOnly Property Description As String
	Public ReadOnly Property ResourceType As eResourceType
	Public ReadOnly Property DepositTypeParameters As Dictionary(Of string, DepositTypeParameter)

    Private Sub New(ByVal id As Integer, ByVal name As String, ByVal description As String, ByVal resourceType As eResourceType, ByVal depositTypeParameters As Dictionary(Of string, DepositTypeParameter))
        Me.Id = id
        Me.Name = name
        Me.Description = description
		Me.DepositTypeParameters = depositTypeParameters
		Me.ResourceType = resourceType
    End Sub

	
<# Dim TableNo As integer = 0 #>
   'The below DepositTypes are generated by the EnumDepositTypes.tt script (which uses Proc_EnumDepositTypes)
<# Dim groupedDepositTypes = _DataSet.Tables(TableNo).AsEnumerable().GroupBy(Function(x) x("DepositTypeId"))
For i as integer = 0 To groupedDepositTypes.Count() - 1
Dim deposittypeparameters As String = "new Dictionary(Of String,DepositTypeParameter) From {"
Dim depositTypeItems = groupedDepositTypes(i)
Dim row As DataRow
For x As Integer = 0 To depositTypeItems.Count() - 1
                row = depositTypeItems(x)
                If (Not String.IsNullOrEmpty(row("DepositTypeParameterId").ToString()))
                    deposittypeparameters += "{""" + row("DepositParameterName") + """, " + "New DepositTypeParameter(" + row("DepositTypeParameterId").ToString() + ", """  + row("DepositParameterName")  + """, """ + row("DefaultValue") +  """, " + row("DepositTypeId").ToString() + "," + row("ConfigValueTypeId").ToString() + ")}"
                Else
                    deposittypeparameters = Nothing
                End If
                
                If(x = depositTypeItems.Count() - 1 AndAlso Not String.IsNullOrEmpty(deposittypeparameters))
                    deposittypeparameters += "}"
                ElseIf(Not String.IsNullOrEmpty(deposittypeparameters))
                    deposittypeparameters += ","
                End If
            Next #>
	<#= string.Format("Public Shared ReadOnly {1} As new DepositType({0}, ""{1}"", ""{2}"", CType({3}, eResourceType), {4})", row("DepositTypeId"), CleanName(row("DepositTypeName")), row("DepositTypeDescription"), row("ResourceTypeID"), if(String.IsNullOrEmpty(deposittypeparameters), "Nothing", deposittypeparameters)) #>
<# Next #>

    ''' <summary>
    ''' Returns all valid DepositTypes
    ''' </summary>
	Public Shared Iterator Function All() As IEnumerable(Of DepositType)
	<# if (_DataSet.Tables(TableNo).Rows.Count > 0) Then #>
	<# For i as integer = 0 To groupedDepositTypes.Count() - 1
	Dim depositTypeItems = groupedDepositTypes(i)
	Dim row As DataRow = depositTypeItems(0)
	#>
	<#=string.Format("yield {0}", CleanName(row("DepositTypeName"))) #>
	<# Next #><# End If #>
End Function
        
	Public Shared Function FromName (ByVal name as string) As DepositType
		if(string.IsNullOrEmpty(name)) then
			throw new ArgumentNullException("name")
		end if

		Dim result = All().FirstOrDefault(Function(x) x.Name = name)

		if(result isNot Nothing)
			return result
		end if

		throw new ArgumentOutOfRangeException("name", name, "Invalid DepositType")
	End Function

	''' <summary>
	''' Allows for the casting of an int type to a DepositType
	''' </summary>
	Public Shared Narrowing Operator CType(id As Integer) As DepositType
		Dim result = All().FirstOrDefault(Function(x) CInt(x) = id)
		If result IsNot Nothing Then
			Return result
		End If

		Throw New InvalidCastException("The value " + id.ToString() + " is not a valid DepositType")
	End Operator

	''' <summary>
	''' Allows for the casting of a DepositType to an integer type
	''' </summary>
	Public Shared Narrowing Operator CType(value As DepositType) As Integer
		Return value.Id
	End Operator

End Class

End Namespace

<#+  
Function CleanName(NameIn as String) as String
	return namein.
        replace(" ","").
        replace(":","").
        replace("-","").
        replace("/","").
        replace("&","").
        Replace(",","").
        Replace(";","").
        Replace("'","").
        replace(")","").
        replace("(","").
        replace(".","").
        replace("$","").
        replace("+","").
        tostring	
End Function

#>